// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.1
// source: api/card/v1/card.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FrozenType int32

const (
	FrozenType_BAN  FrozenType = 0 // 禁止验证行为
	FrozenType_HALT FrozenType = 1 // 禁止验证，冻结时间（冻结期间的时长会推迟过期时间）
)

// Enum value maps for FrozenType.
var (
	FrozenType_name = map[int32]string{
		0: "BAN",
		1: "HALT",
	}
	FrozenType_value = map[string]int32{
		"BAN":  0,
		"HALT": 1,
	}
)

func (x FrozenType) Enum() *FrozenType {
	p := new(FrozenType)
	*p = x
	return p
}

func (x FrozenType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FrozenType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_card_v1_card_proto_enumTypes[0].Descriptor()
}

func (FrozenType) Type() protoreflect.EnumType {
	return &file_api_card_v1_card_proto_enumTypes[0]
}

func (x FrozenType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FrozenType.Descriptor instead.
func (FrozenType) EnumDescriptor() ([]byte, []int) {
	return file_api_card_v1_card_proto_rawDescGZIP(), []int{0}
}

type DurationType int32

const (
	DurationType_ADD     DurationType = 0 // 添加有效时长（秒,小于10年)
	DurationType_EXPIRES DurationType = 1 // 过期时间（时间戳(s)）
)

// Enum value maps for DurationType.
var (
	DurationType_name = map[int32]string{
		0: "ADD",
		1: "EXPIRES",
	}
	DurationType_value = map[string]int32{
		"ADD":     0,
		"EXPIRES": 1,
	}
)

func (x DurationType) Enum() *DurationType {
	p := new(DurationType)
	*p = x
	return p
}

func (x DurationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DurationType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_card_v1_card_proto_enumTypes[1].Descriptor()
}

func (DurationType) Type() protoreflect.EnumType {
	return &file_api_card_v1_card_proto_enumTypes[1]
}

func (x DurationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DurationType.Descriptor instead.
func (DurationType) EnumDescriptor() ([]byte, []int) {
	return file_api_card_v1_card_proto_rawDescGZIP(), []int{1}
}

type LoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppKey    string `protobuf:"bytes,1,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"` // 软件的app_key
	CardId    string `protobuf:"bytes,2,opt,name=cardId,proto3" json:"cardId,omitempty"`               // 登录的卡密
	Device    string `protobuf:"bytes,3,opt,name=device,proto3" json:"device,omitempty"`               // 用户的唯一设备标识
	Nonce     string `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`                 // 不超过36位的随机字符串（建议用UUID）
	Timestamp int64  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`        // 时间戳，秒级（10位数）
	Sign      string `protobuf:"bytes,6,opt,name=sign,proto3" json:"sign,omitempty"`                   // 签名
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_card_v1_card_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_card_v1_card_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_api_card_v1_card_proto_rawDescGZIP(), []int{0}
}

func (x *LoginRequest) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

func (x *LoginRequest) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

func (x *LoginRequest) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *LoginRequest) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *LoginRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *LoginRequest) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type LoginReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                               // 返回码，0表示正确，详细参照返回码对照表
	Message    string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                          // 请求出错时的错误信息
	CardType   string `protobuf:"bytes,3,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`        // 卡密类型
	Token      string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`                              // 本次登录的标识，鉴权用的令牌
	ExpiresTs  int64  `protobuf:"varint,5,opt,name=expires_ts,json=expiresTs,proto3" json:"expires_ts,omitempty"`    // 过期时间戳，秒级（10位数）
	Config     string `protobuf:"bytes,6,opt,name=config,proto3" json:"config,omitempty"`                            // 卡密的配置
	ServerTime int64  `protobuf:"varint,7,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"` // 服务器当前时间戳，秒级（10位数）
}

func (x *LoginReply) Reset() {
	*x = LoginReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_card_v1_card_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginReply) ProtoMessage() {}

func (x *LoginReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_card_v1_card_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginReply.ProtoReflect.Descriptor instead.
func (*LoginReply) Descriptor() ([]byte, []int) {
	return file_api_card_v1_card_proto_rawDescGZIP(), []int{1}
}

func (x *LoginReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *LoginReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LoginReply) GetCardType() string {
	if x != nil {
		return x.CardType
	}
	return ""
}

func (x *LoginReply) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LoginReply) GetExpiresTs() int64 {
	if x != nil {
		return x.ExpiresTs
	}
	return 0
}

func (x *LoginReply) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *LoginReply) GetServerTime() int64 {
	if x != nil {
		return x.ServerTime
	}
	return 0
}

type LogoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppKey    string `protobuf:"bytes,1,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"` // 软件的app_key
	CardId    string `protobuf:"bytes,2,opt,name=cardId,proto3" json:"cardId,omitempty"`               // 登录的卡密
	Device    string `protobuf:"bytes,3,opt,name=device,proto3" json:"device,omitempty"`               // 用户的唯一设备标识
	Nonce     string `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`                 // 不超过36位的随机字符串（建议用UUID）
	Timestamp int64  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`        // 时间戳，秒级（10位数）
	Sign      string `protobuf:"bytes,6,opt,name=sign,proto3" json:"sign,omitempty"`                   // 签名
}

func (x *LogoutRequest) Reset() {
	*x = LogoutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_card_v1_card_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutRequest) ProtoMessage() {}

func (x *LogoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_card_v1_card_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutRequest.ProtoReflect.Descriptor instead.
func (*LogoutRequest) Descriptor() ([]byte, []int) {
	return file_api_card_v1_card_proto_rawDescGZIP(), []int{2}
}

func (x *LogoutRequest) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

func (x *LogoutRequest) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

func (x *LogoutRequest) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *LogoutRequest) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *LogoutRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *LogoutRequest) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type LogoutReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`      // 返回码，0表示正确，详细参照返回码对照表
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 请求出错时的错误信息
}

func (x *LogoutReply) Reset() {
	*x = LogoutReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_card_v1_card_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutReply) ProtoMessage() {}

func (x *LogoutReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_card_v1_card_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutReply.ProtoReflect.Descriptor instead.
func (*LogoutReply) Descriptor() ([]byte, []int) {
	return file_api_card_v1_card_proto_rawDescGZIP(), []int{3}
}

func (x *LogoutReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *LogoutReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppKey          string   `protobuf:"bytes,1,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"`                             // 软件的app_key
	CardId          string   `protobuf:"bytes,2,opt,name=cardId,proto3" json:"cardId,omitempty"`                                           // 卡密
	CardType        string   `protobuf:"bytes,3,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`                       // 卡密类型
	EffectTimestamp int64    `protobuf:"varint,4,opt,name=effect_timestamp,json=effectTimestamp,proto3" json:"effect_timestamp,omitempty"` // 生效时间
	EffectDuration  int64    `protobuf:"varint,5,opt,name=effect_duration,json=effectDuration,proto3" json:"effect_duration,omitempty"`    // 生效时长
	ExpiresTs       int64    `protobuf:"varint,6,opt,name=expires_ts,json=expiresTs,proto3" json:"expires_ts,omitempty"`                   // 过期时间戳，秒级（10位数）
	Config          string   `protobuf:"bytes,7,opt,name=config,proto3" json:"config,omitempty"`                                           // 卡密的配置
	Status          int64    `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`                                          // 状态
	Device          []string `protobuf:"bytes,8,rep,name=device,proto3" json:"device,omitempty"`                                           // 设备相关信息
}

func (x *CardInfo) Reset() {
	*x = CardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_card_v1_card_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardInfo) ProtoMessage() {}

func (x *CardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_card_v1_card_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardInfo.ProtoReflect.Descriptor instead.
func (*CardInfo) Descriptor() ([]byte, []int) {
	return file_api_card_v1_card_proto_rawDescGZIP(), []int{4}
}

func (x *CardInfo) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

func (x *CardInfo) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

func (x *CardInfo) GetCardType() string {
	if x != nil {
		return x.CardType
	}
	return ""
}

func (x *CardInfo) GetEffectTimestamp() int64 {
	if x != nil {
		return x.EffectTimestamp
	}
	return 0
}

func (x *CardInfo) GetEffectDuration() int64 {
	if x != nil {
		return x.EffectDuration
	}
	return 0
}

func (x *CardInfo) GetExpiresTs() int64 {
	if x != nil {
		return x.ExpiresTs
	}
	return 0
}

func (x *CardInfo) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *CardInfo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CardInfo) GetDevice() []string {
	if x != nil {
		return x.Device
	}
	return nil
}

type CreateCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppKey          string   `protobuf:"bytes,1,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"`                             // 软件的app_key
	AppSecret       string   `protobuf:"bytes,2,opt,name=app_secret,json=appSecret,proto3" json:"app_secret,omitempty"`                    // 软件秘钥，在开发端后台软件列表获取
	CardType        string   `protobuf:"bytes,3,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`                       // 卡密类型
	Config          string   `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`                                           // 卡密配置
	EffectTimestamp int64    `protobuf:"varint,5,opt,name=effect_timestamp,json=effectTimestamp,proto3" json:"effect_timestamp,omitempty"` // 生效时间
	EffectDuration  int64    `protobuf:"varint,6,opt,name=effect_duration,json=effectDuration,proto3" json:"effect_duration,omitempty"`    // 生效时长
	Device          []string `protobuf:"bytes,7,rep,name=device,proto3" json:"device,omitempty"`                                           // 设备相关信息
	Timestamp       int64    `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                    // 时间戳
	Nonce           string   `protobuf:"bytes,9,opt,name=nonce,proto3" json:"nonce,omitempty"`                                             // 随机字符串
	Sign            string   `protobuf:"bytes,10,opt,name=sign,proto3" json:"sign,omitempty"`                                              // 签名
}

func (x *CreateCardRequest) Reset() {
	*x = CreateCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_card_v1_card_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCardRequest) ProtoMessage() {}

func (x *CreateCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_card_v1_card_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCardRequest.ProtoReflect.Descriptor instead.
func (*CreateCardRequest) Descriptor() ([]byte, []int) {
	return file_api_card_v1_card_proto_rawDescGZIP(), []int{5}
}

func (x *CreateCardRequest) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

func (x *CreateCardRequest) GetAppSecret() string {
	if x != nil {
		return x.AppSecret
	}
	return ""
}

func (x *CreateCardRequest) GetCardType() string {
	if x != nil {
		return x.CardType
	}
	return ""
}

func (x *CreateCardRequest) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *CreateCardRequest) GetEffectTimestamp() int64 {
	if x != nil {
		return x.EffectTimestamp
	}
	return 0
}

func (x *CreateCardRequest) GetEffectDuration() int64 {
	if x != nil {
		return x.EffectDuration
	}
	return 0
}

func (x *CreateCardRequest) GetDevice() []string {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *CreateCardRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *CreateCardRequest) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *CreateCardRequest) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type CardReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       int64       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                               // 返回码，0表示正确，详细参照返回码对照表
	Message    string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                          // 请求出错时的错误信息
	Card       []*CardInfo `protobuf:"bytes,3,rep,name=card,proto3" json:"card,omitempty"`                                // 创建成功的卡密列表
	ServerTime int64       `protobuf:"varint,4,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"` // 服务器当前时间戳，秒级（10位数）
}

func (x *CardReply) Reset() {
	*x = CardReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_card_v1_card_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardReply) ProtoMessage() {}

func (x *CardReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_card_v1_card_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardReply.ProtoReflect.Descriptor instead.
func (*CardReply) Descriptor() ([]byte, []int) {
	return file_api_card_v1_card_proto_rawDescGZIP(), []int{6}
}

func (x *CardReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CardReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CardReply) GetCard() []*CardInfo {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *CardReply) GetServerTime() int64 {
	if x != nil {
		return x.ServerTime
	}
	return 0
}

type HeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device    string `protobuf:"bytes,3,opt,name=device,proto3" json:"device,omitempty"`        // 用户的唯一设备标识
	Nonce     string `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`          // 不超过36位的随机字符串（建议用UUID）
	Timestamp int64  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // 时间戳，秒级（10位数）
	Sign      string `protobuf:"bytes,6,opt,name=sign,proto3" json:"sign,omitempty"`            // 签名
}

func (x *HeartbeatRequest) Reset() {
	*x = HeartbeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_card_v1_card_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatRequest) ProtoMessage() {}

func (x *HeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_card_v1_card_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatRequest.ProtoReflect.Descriptor instead.
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_api_card_v1_card_proto_rawDescGZIP(), []int{7}
}

func (x *HeartbeatRequest) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *HeartbeatRequest) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *HeartbeatRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *HeartbeatRequest) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type HeartbeatReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                               // 返回码，0表示正确，详细参照返回码对照表
	Message    string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                          // 请求出错时的错误信息
	Token      string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`                              // 下次心跳鉴权用的令牌
	ExpiresTs  int64  `protobuf:"varint,5,opt,name=expires_ts,json=expiresTs,proto3" json:"expires_ts,omitempty"`    // 过期时间戳，秒级（10位数）
	ServerTime int64  `protobuf:"varint,7,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"` // 服务器当前时间戳，秒级（10位数）
}

func (x *HeartbeatReply) Reset() {
	*x = HeartbeatReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_card_v1_card_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatReply) ProtoMessage() {}

func (x *HeartbeatReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_card_v1_card_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatReply.ProtoReflect.Descriptor instead.
func (*HeartbeatReply) Descriptor() ([]byte, []int) {
	return file_api_card_v1_card_proto_rawDescGZIP(), []int{8}
}

func (x *HeartbeatReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *HeartbeatReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *HeartbeatReply) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *HeartbeatReply) GetExpiresTs() int64 {
	if x != nil {
		return x.ExpiresTs
	}
	return 0
}

func (x *HeartbeatReply) GetServerTime() int64 {
	if x != nil {
		return x.ServerTime
	}
	return 0
}

type FrozenCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppKey     string     `protobuf:"bytes,1,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"`                                          // 软件的app_key
	CardId     string     `protobuf:"bytes,2,opt,name=cardId,proto3" json:"cardId,omitempty"`                                                        // 卡密
	FrozenType FrozenType `protobuf:"varint,3,opt,name=Frozen_type,json=FrozenType,proto3,enum=api.card.v1.FrozenType" json:"Frozen_type,omitempty"` // 冻结类型
	Nonce      string     `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`                                                          // 不超过36位的随机字符串（建议用UUID）
	Timestamp  int64      `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                 // 时间戳，秒级（10位数）
	Sign       string     `protobuf:"bytes,6,opt,name=sign,proto3" json:"sign,omitempty"`                                                            // 签名
}

func (x *FrozenCardRequest) Reset() {
	*x = FrozenCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_card_v1_card_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrozenCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrozenCardRequest) ProtoMessage() {}

func (x *FrozenCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_card_v1_card_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrozenCardRequest.ProtoReflect.Descriptor instead.
func (*FrozenCardRequest) Descriptor() ([]byte, []int) {
	return file_api_card_v1_card_proto_rawDescGZIP(), []int{9}
}

func (x *FrozenCardRequest) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

func (x *FrozenCardRequest) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

func (x *FrozenCardRequest) GetFrozenType() FrozenType {
	if x != nil {
		return x.FrozenType
	}
	return FrozenType_BAN
}

func (x *FrozenCardRequest) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *FrozenCardRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *FrozenCardRequest) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type FrozenCardReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                  // 返回码，0表示正确，详细参照返回码对照表
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`             // 请求出错时的错误信息
	AppKey    string `protobuf:"bytes,3,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"` // 软件的app_key
	CardId    string `protobuf:"bytes,4,opt,name=cardId,proto3" json:"cardId,omitempty"`               // 卡密
	Nonce     string `protobuf:"bytes,5,opt,name=nonce,proto3" json:"nonce,omitempty"`                 // 不超过36位的随机字符串（建议用UUID）
	Timestamp int64  `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`        // 时间戳，秒级（10位数）
	Sign      string `protobuf:"bytes,7,opt,name=sign,proto3" json:"sign,omitempty"`                   // 签名
}

func (x *FrozenCardReply) Reset() {
	*x = FrozenCardReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_card_v1_card_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrozenCardReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrozenCardReply) ProtoMessage() {}

func (x *FrozenCardReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_card_v1_card_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrozenCardReply.ProtoReflect.Descriptor instead.
func (*FrozenCardReply) Descriptor() ([]byte, []int) {
	return file_api_card_v1_card_proto_rawDescGZIP(), []int{10}
}

func (x *FrozenCardReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FrozenCardReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FrozenCardReply) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

func (x *FrozenCardReply) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

func (x *FrozenCardReply) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *FrozenCardReply) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *FrozenCardReply) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type ThawCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppKey    string `protobuf:"bytes,1,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"` // 软件的app_key
	CardId    string `protobuf:"bytes,2,opt,name=cardId,proto3" json:"cardId,omitempty"`               // 卡密
	Nonce     string `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`                 // 不超过36位的随机字符串（建议用UUID）
	Timestamp int64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`        // 时间戳，秒级（10位数）
	Sign      string `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign,omitempty"`                   // 签名
}

func (x *ThawCardRequest) Reset() {
	*x = ThawCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_card_v1_card_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThawCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThawCardRequest) ProtoMessage() {}

func (x *ThawCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_card_v1_card_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThawCardRequest.ProtoReflect.Descriptor instead.
func (*ThawCardRequest) Descriptor() ([]byte, []int) {
	return file_api_card_v1_card_proto_rawDescGZIP(), []int{11}
}

func (x *ThawCardRequest) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

func (x *ThawCardRequest) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

func (x *ThawCardRequest) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *ThawCardRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ThawCardRequest) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type ThawCardReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                  // 返回码，0表示正确，详细参照返回码对照表
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`             // 请求出错时的错误信息
	AppKey    string `protobuf:"bytes,3,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"` // 软件的app_key
	CardId    string `protobuf:"bytes,4,opt,name=cardId,proto3" json:"cardId,omitempty"`               // 卡密
	Nonce     string `protobuf:"bytes,5,opt,name=nonce,proto3" json:"nonce,omitempty"`                 // 不超过36位的随机字符串（建议用UUID）
	Timestamp int64  `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`        // 时间戳，秒级（10位数）
	Sign      string `protobuf:"bytes,7,opt,name=sign,proto3" json:"sign,omitempty"`                   // 签名
}

func (x *ThawCardReply) Reset() {
	*x = ThawCardReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_card_v1_card_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThawCardReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThawCardReply) ProtoMessage() {}

func (x *ThawCardReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_card_v1_card_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThawCardReply.ProtoReflect.Descriptor instead.
func (*ThawCardReply) Descriptor() ([]byte, []int) {
	return file_api_card_v1_card_proto_rawDescGZIP(), []int{12}
}

func (x *ThawCardReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ThawCardReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ThawCardReply) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

func (x *ThawCardReply) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

func (x *ThawCardReply) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *ThawCardReply) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ThawCardReply) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type DelCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppKey    string `protobuf:"bytes,1,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"` // 软件的app_key
	CardId    string `protobuf:"bytes,2,opt,name=cardId,proto3" json:"cardId,omitempty"`               // 卡密
	Nonce     string `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`                 // 不超过36位的随机字符串（建议用UUID）
	Timestamp int64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`        // 时间戳，秒级（10位数）
	Sign      string `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign,omitempty"`                   // 签名
}

func (x *DelCardRequest) Reset() {
	*x = DelCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_card_v1_card_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelCardRequest) ProtoMessage() {}

func (x *DelCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_card_v1_card_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelCardRequest.ProtoReflect.Descriptor instead.
func (*DelCardRequest) Descriptor() ([]byte, []int) {
	return file_api_card_v1_card_proto_rawDescGZIP(), []int{13}
}

func (x *DelCardRequest) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

func (x *DelCardRequest) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

func (x *DelCardRequest) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *DelCardRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DelCardRequest) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type DelCardReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                  // 返回码，0表示正确，详细参照返回码对照表
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`             // 请求出错时的错误信息
	AppKey    string `protobuf:"bytes,3,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"` // 软件的app_key
	CardId    string `protobuf:"bytes,4,opt,name=cardId,proto3" json:"cardId,omitempty"`               // 卡密
	Nonce     string `protobuf:"bytes,5,opt,name=nonce,proto3" json:"nonce,omitempty"`                 // 不超过36位的随机字符串（建议用UUID）
	Timestamp int64  `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`        // 时间戳，秒级（10位数）
	Sign      string `protobuf:"bytes,7,opt,name=sign,proto3" json:"sign,omitempty"`                   // 签名
}

func (x *DelCardReply) Reset() {
	*x = DelCardReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_card_v1_card_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelCardReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelCardReply) ProtoMessage() {}

func (x *DelCardReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_card_v1_card_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelCardReply.ProtoReflect.Descriptor instead.
func (*DelCardReply) Descriptor() ([]byte, []int) {
	return file_api_card_v1_card_proto_rawDescGZIP(), []int{14}
}

func (x *DelCardReply) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DelCardReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DelCardReply) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

func (x *DelCardReply) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

func (x *DelCardReply) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *DelCardReply) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DelCardReply) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type CloneCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppKey    string   `protobuf:"bytes,1,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"`          // 软件的app_key
	AppSecret string   `protobuf:"bytes,2,opt,name=app_secret,json=appSecret,proto3" json:"app_secret,omitempty"` // 软件秘钥，在开发端后台软件列表获取
	CardId    string   `protobuf:"bytes,3,opt,name=cardId,proto3" json:"cardId,omitempty"`                        // 卡密ID
	Device    []string `protobuf:"bytes,4,rep,name=device,proto3" json:"device,omitempty"`                        // 设备相关信息
	Timestamp int64    `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                 // 时间戳
	Nonce     string   `protobuf:"bytes,6,opt,name=nonce,proto3" json:"nonce,omitempty"`                          // 随机字符串
	Sign      string   `protobuf:"bytes,7,opt,name=sign,proto3" json:"sign,omitempty"`                            // 签名
}

func (x *CloneCardRequest) Reset() {
	*x = CloneCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_card_v1_card_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneCardRequest) ProtoMessage() {}

func (x *CloneCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_card_v1_card_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneCardRequest.ProtoReflect.Descriptor instead.
func (*CloneCardRequest) Descriptor() ([]byte, []int) {
	return file_api_card_v1_card_proto_rawDescGZIP(), []int{15}
}

func (x *CloneCardRequest) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

func (x *CloneCardRequest) GetAppSecret() string {
	if x != nil {
		return x.AppSecret
	}
	return ""
}

func (x *CloneCardRequest) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

func (x *CloneCardRequest) GetDevice() []string {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *CloneCardRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *CloneCardRequest) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *CloneCardRequest) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type DurationCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppKey       string       `protobuf:"bytes,1,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"`                                                  // 软件的app_key
	AppSecret    string       `protobuf:"bytes,2,opt,name=app_secret,json=appSecret,proto3" json:"app_secret,omitempty"`                                         // 软件秘钥，在开发端后台软件列表获取
	CardId       string       `protobuf:"bytes,3,opt,name=cardId,proto3" json:"cardId,omitempty"`                                                                // 卡密ID
	DurationType DurationType `protobuf:"varint,4,opt,name=duration_type,json=durationType,proto3,enum=api.card.v1.DurationType" json:"duration_type,omitempty"` // 添加时长类型
	Duration     int64        `protobuf:"varint,5,opt,name=Duration,proto3" json:"Duration,omitempty"`
	Timestamp    int64        `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // 时间戳
	Nonce        string       `protobuf:"bytes,7,opt,name=nonce,proto3" json:"nonce,omitempty"`          // 随机字符串
	Sign         string       `protobuf:"bytes,8,opt,name=sign,proto3" json:"sign,omitempty"`            // 签名
}

func (x *DurationCardRequest) Reset() {
	*x = DurationCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_card_v1_card_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DurationCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DurationCardRequest) ProtoMessage() {}

func (x *DurationCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_card_v1_card_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DurationCardRequest.ProtoReflect.Descriptor instead.
func (*DurationCardRequest) Descriptor() ([]byte, []int) {
	return file_api_card_v1_card_proto_rawDescGZIP(), []int{16}
}

func (x *DurationCardRequest) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

func (x *DurationCardRequest) GetAppSecret() string {
	if x != nil {
		return x.AppSecret
	}
	return ""
}

func (x *DurationCardRequest) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

func (x *DurationCardRequest) GetDurationType() DurationType {
	if x != nil {
		return x.DurationType
	}
	return DurationType_ADD
}

func (x *DurationCardRequest) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *DurationCardRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DurationCardRequest) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *DurationCardRequest) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

var File_api_card_v1_card_proto protoreflect.FileDescriptor

var file_api_card_v1_card_proto_rawDesc = []byte{
	0x0a, 0x16, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61,
	0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0xc5, 0x01, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x5f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x54, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa0, 0x01,
	0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x67, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e,
	0x22, 0x3b, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x93, 0x02,
	0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70,
	0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70,
	0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x54, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x22, 0xb4, 0x02, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x4b,
	0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x85, 0x01, 0x0a, 0x09, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x63, 0x61, 0x72,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x72, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x94, 0x01, 0x0a, 0x0e, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x54, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc6, 0x01,
	0x0a, 0x11, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0xb8, 0x01, 0x0a, 0x0f, 0x46, 0x72, 0x6f, 0x7a, 0x65,
	0x6e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x4b, 0x65,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67,
	0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x0f, 0x54, 0x68, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x67, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0xb6,
	0x01, 0x0a, 0x0d, 0x54, 0x68, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70,
	0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70,
	0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x69, 0x67, 0x6e, 0x22, 0xb5, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0xc2, 0x01, 0x0a, 0x10,
	0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x70, 0x70,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x64,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x67, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e,
	0x22, 0x89, 0x02, 0x0a, 0x13, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x4b, 0x65,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x2a, 0x1f, 0x0a, 0x0a,
	0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x41,
	0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x41, 0x4c, 0x54, 0x10, 0x01, 0x2a, 0x24, 0x0a,
	0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45,
	0x53, 0x10, 0x01, 0x32, 0xe0, 0x06, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x57, 0x0a, 0x09,
	0x43, 0x61, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x16, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x2f,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x67, 0x0a, 0x0d, 0x43, 0x61, 0x72, 0x64, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f,
	0x63, 0x61, 0x72, 0x64, 0x2f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x5b,
	0x0a, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x1a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f,
	0x63, 0x61, 0x72, 0x64, 0x2f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x5d, 0x0a, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x63,
	0x61, 0x72, 0x64, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x63, 0x0a, 0x0a, 0x46, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01,
	0x2a, 0x22, 0x0c, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x2f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12,
	0x5b, 0x0a, 0x08, 0x54, 0x68, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x61, 0x77, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x3a, 0x01, 0x2a,
	0x22, 0x0a, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x2f, 0x74, 0x68, 0x61, 0x77, 0x12, 0x57, 0x0a, 0x07,
	0x44, 0x65, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x3a, 0x01, 0x2a, 0x22, 0x09, 0x2f, 0x63, 0x61, 0x72,
	0x64, 0x2f, 0x64, 0x65, 0x6c, 0x12, 0x5a, 0x0a, 0x09, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x10, 0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x2f, 0x63, 0x6c, 0x6f, 0x6e,
	0x65, 0x12, 0x63, 0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x19, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x27, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x16, 0x66, 0x6f, 0x78, 0x63, 0x61, 0x72, 0x64,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_card_v1_card_proto_rawDescOnce sync.Once
	file_api_card_v1_card_proto_rawDescData = file_api_card_v1_card_proto_rawDesc
)

func file_api_card_v1_card_proto_rawDescGZIP() []byte {
	file_api_card_v1_card_proto_rawDescOnce.Do(func() {
		file_api_card_v1_card_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_card_v1_card_proto_rawDescData)
	})
	return file_api_card_v1_card_proto_rawDescData
}

var file_api_card_v1_card_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_card_v1_card_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_api_card_v1_card_proto_goTypes = []interface{}{
	(FrozenType)(0),             // 0: api.card.v1.FrozenType
	(DurationType)(0),           // 1: api.card.v1.DurationType
	(*LoginRequest)(nil),        // 2: api.card.v1.LoginRequest
	(*LoginReply)(nil),          // 3: api.card.v1.LoginReply
	(*LogoutRequest)(nil),       // 4: api.card.v1.LogoutRequest
	(*LogoutReply)(nil),         // 5: api.card.v1.LogoutReply
	(*CardInfo)(nil),            // 6: api.card.v1.CardInfo
	(*CreateCardRequest)(nil),   // 7: api.card.v1.CreateCardRequest
	(*CardReply)(nil),           // 8: api.card.v1.CardReply
	(*HeartbeatRequest)(nil),    // 9: api.card.v1.HeartbeatRequest
	(*HeartbeatReply)(nil),      // 10: api.card.v1.HeartbeatReply
	(*FrozenCardRequest)(nil),   // 11: api.card.v1.FrozenCardRequest
	(*FrozenCardReply)(nil),     // 12: api.card.v1.FrozenCardReply
	(*ThawCardRequest)(nil),     // 13: api.card.v1.ThawCardRequest
	(*ThawCardReply)(nil),       // 14: api.card.v1.ThawCardReply
	(*DelCardRequest)(nil),      // 15: api.card.v1.DelCardRequest
	(*DelCardReply)(nil),        // 16: api.card.v1.DelCardReply
	(*CloneCardRequest)(nil),    // 17: api.card.v1.CloneCardRequest
	(*DurationCardRequest)(nil), // 18: api.card.v1.DurationCardRequest
}
var file_api_card_v1_card_proto_depIdxs = []int32{
	6,  // 0: api.card.v1.CardReply.card:type_name -> api.card.v1.CardInfo
	0,  // 1: api.card.v1.FrozenCardRequest.Frozen_type:type_name -> api.card.v1.FrozenType
	1,  // 2: api.card.v1.DurationCardRequest.duration_type:type_name -> api.card.v1.DurationType
	2,  // 3: api.card.v1.Card.CardLogin:input_type -> api.card.v1.LoginRequest
	9,  // 4: api.card.v1.Card.CardHeartbeat:input_type -> api.card.v1.HeartbeatRequest
	4,  // 5: api.card.v1.Card.CardLogout:input_type -> api.card.v1.LogoutRequest
	7,  // 6: api.card.v1.Card.CreateCard:input_type -> api.card.v1.CreateCardRequest
	11, // 7: api.card.v1.Card.FrozenCard:input_type -> api.card.v1.FrozenCardRequest
	13, // 8: api.card.v1.Card.ThawCard:input_type -> api.card.v1.ThawCardRequest
	15, // 9: api.card.v1.Card.DelCard:input_type -> api.card.v1.DelCardRequest
	17, // 10: api.card.v1.Card.CloneCard:input_type -> api.card.v1.CloneCardRequest
	18, // 11: api.card.v1.Card.DurationCard:input_type -> api.card.v1.DurationCardRequest
	3,  // 12: api.card.v1.Card.CardLogin:output_type -> api.card.v1.LoginReply
	10, // 13: api.card.v1.Card.CardHeartbeat:output_type -> api.card.v1.HeartbeatReply
	5,  // 14: api.card.v1.Card.CardLogout:output_type -> api.card.v1.LogoutReply
	8,  // 15: api.card.v1.Card.CreateCard:output_type -> api.card.v1.CardReply
	12, // 16: api.card.v1.Card.FrozenCard:output_type -> api.card.v1.FrozenCardReply
	14, // 17: api.card.v1.Card.ThawCard:output_type -> api.card.v1.ThawCardReply
	16, // 18: api.card.v1.Card.DelCard:output_type -> api.card.v1.DelCardReply
	8,  // 19: api.card.v1.Card.CloneCard:output_type -> api.card.v1.CardReply
	8,  // 20: api.card.v1.Card.DurationCard:output_type -> api.card.v1.CardReply
	12, // [12:21] is the sub-list for method output_type
	3,  // [3:12] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_api_card_v1_card_proto_init() }
func file_api_card_v1_card_proto_init() {
	if File_api_card_v1_card_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_card_v1_card_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_card_v1_card_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_card_v1_card_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_card_v1_card_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_card_v1_card_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_card_v1_card_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_card_v1_card_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_card_v1_card_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_card_v1_card_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_card_v1_card_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrozenCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_card_v1_card_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrozenCardReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_card_v1_card_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThawCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_card_v1_card_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThawCardReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_card_v1_card_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_card_v1_card_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelCardReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_card_v1_card_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloneCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_card_v1_card_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DurationCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_card_v1_card_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_card_v1_card_proto_goTypes,
		DependencyIndexes: file_api_card_v1_card_proto_depIdxs,
		EnumInfos:         file_api_card_v1_card_proto_enumTypes,
		MessageInfos:      file_api_card_v1_card_proto_msgTypes,
	}.Build()
	File_api_card_v1_card_proto = out.File
	file_api_card_v1_card_proto_rawDesc = nil
	file_api_card_v1_card_proto_goTypes = nil
	file_api_card_v1_card_proto_depIdxs = nil
}
