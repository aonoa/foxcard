// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: api/card/v1/card.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Card_CardLogin_FullMethodName     = "/api.card.v1.Card/CardLogin"
	Card_CardHeartbeat_FullMethodName = "/api.card.v1.Card/CardHeartbeat"
	Card_CardLogout_FullMethodName    = "/api.card.v1.Card/CardLogout"
	Card_CreateCard_FullMethodName    = "/api.card.v1.Card/CreateCard"
	Card_FrozenCard_FullMethodName    = "/api.card.v1.Card/FrozenCard"
	Card_ThawCard_FullMethodName      = "/api.card.v1.Card/ThawCard"
	Card_DelCard_FullMethodName       = "/api.card.v1.Card/DelCard"
	Card_CloneCard_FullMethodName     = "/api.card.v1.Card/CloneCard"
	Card_DurationCard_FullMethodName  = "/api.card.v1.Card/DurationCard"
)

// CardClient is the client API for Card service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardClient interface {
	// 卡密登陆
	CardLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	// 卡密心跳
	CardHeartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatReply, error)
	// 卡密退出登陆
	CardLogout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutReply, error)
	// 生成卡密
	CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*CardReply, error)
	// 冻结卡
	FrozenCard(ctx context.Context, in *FrozenCardRequest, opts ...grpc.CallOption) (*FrozenCardReply, error)
	// 解冻卡
	ThawCard(ctx context.Context, in *ThawCardRequest, opts ...grpc.CallOption) (*ThawCardReply, error)
	// 销毁卡
	DelCard(ctx context.Context, in *DelCardRequest, opts ...grpc.CallOption) (*DelCardReply, error)
	// 卡密克隆
	CloneCard(ctx context.Context, in *CloneCardRequest, opts ...grpc.CallOption) (*CardReply, error)
	// 时长控制
	DurationCard(ctx context.Context, in *DurationCardRequest, opts ...grpc.CallOption) (*CardReply, error)
}

type cardClient struct {
	cc grpc.ClientConnInterface
}

func NewCardClient(cc grpc.ClientConnInterface) CardClient {
	return &cardClient{cc}
}

func (c *cardClient) CardLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, Card_CardLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) CardHeartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatReply, error) {
	out := new(HeartbeatReply)
	err := c.cc.Invoke(ctx, Card_CardHeartbeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) CardLogout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutReply, error) {
	out := new(LogoutReply)
	err := c.cc.Invoke(ctx, Card_CardLogout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*CardReply, error) {
	out := new(CardReply)
	err := c.cc.Invoke(ctx, Card_CreateCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) FrozenCard(ctx context.Context, in *FrozenCardRequest, opts ...grpc.CallOption) (*FrozenCardReply, error) {
	out := new(FrozenCardReply)
	err := c.cc.Invoke(ctx, Card_FrozenCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) ThawCard(ctx context.Context, in *ThawCardRequest, opts ...grpc.CallOption) (*ThawCardReply, error) {
	out := new(ThawCardReply)
	err := c.cc.Invoke(ctx, Card_ThawCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) DelCard(ctx context.Context, in *DelCardRequest, opts ...grpc.CallOption) (*DelCardReply, error) {
	out := new(DelCardReply)
	err := c.cc.Invoke(ctx, Card_DelCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) CloneCard(ctx context.Context, in *CloneCardRequest, opts ...grpc.CallOption) (*CardReply, error) {
	out := new(CardReply)
	err := c.cc.Invoke(ctx, Card_CloneCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) DurationCard(ctx context.Context, in *DurationCardRequest, opts ...grpc.CallOption) (*CardReply, error) {
	out := new(CardReply)
	err := c.cc.Invoke(ctx, Card_DurationCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardServer is the server API for Card service.
// All implementations must embed UnimplementedCardServer
// for forward compatibility
type CardServer interface {
	// 卡密登陆
	CardLogin(context.Context, *LoginRequest) (*LoginReply, error)
	// 卡密心跳
	CardHeartbeat(context.Context, *HeartbeatRequest) (*HeartbeatReply, error)
	// 卡密退出登陆
	CardLogout(context.Context, *LogoutRequest) (*LogoutReply, error)
	// 生成卡密
	CreateCard(context.Context, *CreateCardRequest) (*CardReply, error)
	// 冻结卡
	FrozenCard(context.Context, *FrozenCardRequest) (*FrozenCardReply, error)
	// 解冻卡
	ThawCard(context.Context, *ThawCardRequest) (*ThawCardReply, error)
	// 销毁卡
	DelCard(context.Context, *DelCardRequest) (*DelCardReply, error)
	// 卡密克隆
	CloneCard(context.Context, *CloneCardRequest) (*CardReply, error)
	// 时长控制
	DurationCard(context.Context, *DurationCardRequest) (*CardReply, error)
	mustEmbedUnimplementedCardServer()
}

// UnimplementedCardServer must be embedded to have forward compatible implementations.
type UnimplementedCardServer struct {
}

func (UnimplementedCardServer) CardLogin(context.Context, *LoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardLogin not implemented")
}
func (UnimplementedCardServer) CardHeartbeat(context.Context, *HeartbeatRequest) (*HeartbeatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardHeartbeat not implemented")
}
func (UnimplementedCardServer) CardLogout(context.Context, *LogoutRequest) (*LogoutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardLogout not implemented")
}
func (UnimplementedCardServer) CreateCard(context.Context, *CreateCardRequest) (*CardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCard not implemented")
}
func (UnimplementedCardServer) FrozenCard(context.Context, *FrozenCardRequest) (*FrozenCardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrozenCard not implemented")
}
func (UnimplementedCardServer) ThawCard(context.Context, *ThawCardRequest) (*ThawCardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThawCard not implemented")
}
func (UnimplementedCardServer) DelCard(context.Context, *DelCardRequest) (*DelCardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCard not implemented")
}
func (UnimplementedCardServer) CloneCard(context.Context, *CloneCardRequest) (*CardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneCard not implemented")
}
func (UnimplementedCardServer) DurationCard(context.Context, *DurationCardRequest) (*CardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DurationCard not implemented")
}
func (UnimplementedCardServer) mustEmbedUnimplementedCardServer() {}

// UnsafeCardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardServer will
// result in compilation errors.
type UnsafeCardServer interface {
	mustEmbedUnimplementedCardServer()
}

func RegisterCardServer(s grpc.ServiceRegistrar, srv CardServer) {
	s.RegisterService(&Card_ServiceDesc, srv)
}

func _Card_CardLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).CardLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Card_CardLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).CardLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_CardHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).CardHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Card_CardHeartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).CardHeartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_CardLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).CardLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Card_CardLogout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).CardLogout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_CreateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).CreateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Card_CreateCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).CreateCard(ctx, req.(*CreateCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_FrozenCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrozenCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).FrozenCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Card_FrozenCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).FrozenCard(ctx, req.(*FrozenCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_ThawCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThawCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).ThawCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Card_ThawCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).ThawCard(ctx, req.(*ThawCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_DelCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).DelCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Card_DelCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).DelCard(ctx, req.(*DelCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_CloneCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).CloneCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Card_CloneCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).CloneCard(ctx, req.(*CloneCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_DurationCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DurationCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).DurationCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Card_DurationCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).DurationCard(ctx, req.(*DurationCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Card_ServiceDesc is the grpc.ServiceDesc for Card service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Card_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.card.v1.Card",
	HandlerType: (*CardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CardLogin",
			Handler:    _Card_CardLogin_Handler,
		},
		{
			MethodName: "CardHeartbeat",
			Handler:    _Card_CardHeartbeat_Handler,
		},
		{
			MethodName: "CardLogout",
			Handler:    _Card_CardLogout_Handler,
		},
		{
			MethodName: "CreateCard",
			Handler:    _Card_CreateCard_Handler,
		},
		{
			MethodName: "FrozenCard",
			Handler:    _Card_FrozenCard_Handler,
		},
		{
			MethodName: "ThawCard",
			Handler:    _Card_ThawCard_Handler,
		},
		{
			MethodName: "DelCard",
			Handler:    _Card_DelCard_Handler,
		},
		{
			MethodName: "CloneCard",
			Handler:    _Card_CloneCard_Handler,
		},
		{
			MethodName: "DurationCard",
			Handler:    _Card_DurationCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/card/v1/card.proto",
}
